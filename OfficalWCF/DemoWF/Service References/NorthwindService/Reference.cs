//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWF.NorthwindService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FreightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RequireDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ShipViaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ShippedDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIDField, value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Freight {
            get {
                return this.FreightField;
            }
            set {
                if ((this.FreightField.Equals(value) != true)) {
                    this.FreightField = value;
                    this.RaisePropertyChanged("Freight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequireDate {
            get {
                return this.RequireDateField;
            }
            set {
                if ((this.RequireDateField.Equals(value) != true)) {
                    this.RequireDateField = value;
                    this.RaisePropertyChanged("RequireDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShipVia {
            get {
                return this.ShipViaField;
            }
            set {
                if ((this.ShipViaField.Equals(value) != true)) {
                    this.ShipViaField = value;
                    this.RaisePropertyChanged("ShipVia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ShippedDate {
            get {
                return this.ShippedDateField;
            }
            set {
                if ((this.ShippedDateField.Equals(value) != true)) {
                    this.ShippedDateField = value;
                    this.RaisePropertyChanged("ShippedDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscontinuedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityPerUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReorderLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal UnitPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitsInStockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitsOnOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Discontinued {
            get {
                return this.DiscontinuedField;
            }
            set {
                if ((this.DiscontinuedField.Equals(value) != true)) {
                    this.DiscontinuedField = value;
                    this.RaisePropertyChanged("Discontinued");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityPerUnit {
            get {
                return this.QuantityPerUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityPerUnitField, value) != true)) {
                    this.QuantityPerUnitField = value;
                    this.RaisePropertyChanged("QuantityPerUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReorderLevel {
            get {
                return this.ReorderLevelField;
            }
            set {
                if ((this.ReorderLevelField.Equals(value) != true)) {
                    this.ReorderLevelField = value;
                    this.RaisePropertyChanged("ReorderLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitsInStock {
            get {
                return this.UnitsInStockField;
            }
            set {
                if ((this.UnitsInStockField.Equals(value) != true)) {
                    this.UnitsInStockField = value;
                    this.RaisePropertyChanged("UnitsInStock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitsOnOrder {
            get {
                return this.UnitsOnOrderField;
            }
            set {
                if ((this.UnitsOnOrderField.Equals(value) != true)) {
                    this.UnitsOnOrderField = value;
                    this.RaisePropertyChanged("UnitsOnOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactTitle {
            get {
                return this.ContactTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactTitleField, value) != true)) {
                    this.ContactTitleField = value;
                    this.RaisePropertyChanged("ContactTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIDField, value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetailProducts", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities.ViewModel")]
    [System.SerializableAttribute()]
    public partial class DetailProducts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal UnitPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Discount {
            get {
                return this.DiscountField;
            }
            set {
                if ((this.DiscountField.Equals(value) != true)) {
                    this.DiscountField = value;
                    this.RaisePropertyChanged("Discount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassWord {
            get {
                return this.PassWordField;
            }
            set {
                if ((object.ReferenceEquals(this.PassWordField, value) != true)) {
                    this.PassWordField = value;
                    this.RaisePropertyChanged("PassWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NorthwindService.Service1")]
    public interface Service1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCategogy", ReplyAction="http://tempuri.org/Service1/GetCategogyResponse")]
        DemoWF.NorthwindService.Category GetCategogy(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCategogy", ReplyAction="http://tempuri.org/Service1/GetCategogyResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Category> GetCategogyAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCategogyByName", ReplyAction="http://tempuri.org/Service1/GetCategogyByNameResponse")]
        DemoWF.NorthwindService.Category[] GetCategogyByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCategogyByName", ReplyAction="http://tempuri.org/Service1/GetCategogyByNameResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Category[]> GetCategogyByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllCategory", ReplyAction="http://tempuri.org/Service1/GetAllCategoryResponse")]
        DemoWF.NorthwindService.Category[] GetAllCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllCategory", ReplyAction="http://tempuri.org/Service1/GetAllCategoryResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Category[]> GetAllCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddCategory", ReplyAction="http://tempuri.org/Service1/AddCategoryResponse")]
        int AddCategory(DemoWF.NorthwindService.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddCategory", ReplyAction="http://tempuri.org/Service1/AddCategoryResponse")]
        System.Threading.Tasks.Task<int> AddCategoryAsync(DemoWF.NorthwindService.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateCategory", ReplyAction="http://tempuri.org/Service1/UpdateCategoryResponse")]
        int UpdateCategory(DemoWF.NorthwindService.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateCategory", ReplyAction="http://tempuri.org/Service1/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(DemoWF.NorthwindService.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteCategory", ReplyAction="http://tempuri.org/Service1/DeleteCategoryResponse")]
        int DeleteCategory(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteCategory", ReplyAction="http://tempuri.org/Service1/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<int> DeleteCategoryAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetOrder", ReplyAction="http://tempuri.org/Service1/GetOrderResponse")]
        DemoWF.NorthwindService.Order[] GetOrder(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetOrder", ReplyAction="http://tempuri.org/Service1/GetOrderResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetOrderAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/LoadOrder", ReplyAction="http://tempuri.org/Service1/LoadOrderResponse")]
        DemoWF.NorthwindService.Order[] LoadOrder(string id, int numofrow, int numofnext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/LoadOrder", ReplyAction="http://tempuri.org/Service1/LoadOrderResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> LoadOrderAsync(string id, int numofrow, int numofnext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetListOrderByDate", ReplyAction="http://tempuri.org/Service1/GetListOrderByDateResponse")]
        DemoWF.NorthwindService.Order[] GetListOrderByDate(string cusid, System.DateTime fromdate, System.DateTime todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetListOrderByDate", ReplyAction="http://tempuri.org/Service1/GetListOrderByDateResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetListOrderByDateAsync(string cusid, System.DateTime fromdate, System.DateTime todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllOrder", ReplyAction="http://tempuri.org/Service1/GetAllOrderResponse")]
        DemoWF.NorthwindService.Order[] GetAllOrder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllOrder", ReplyAction="http://tempuri.org/Service1/GetAllOrderResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetAllOrderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddOrder", ReplyAction="http://tempuri.org/Service1/AddOrderResponse")]
        int AddOrder(DemoWF.NorthwindService.Order or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddOrder", ReplyAction="http://tempuri.org/Service1/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(DemoWF.NorthwindService.Order or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateOrder", ReplyAction="http://tempuri.org/Service1/UpdateOrderResponse")]
        int UpdateOrder(DemoWF.NorthwindService.Order or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateOrder", ReplyAction="http://tempuri.org/Service1/UpdateOrderResponse")]
        System.Threading.Tasks.Task<int> UpdateOrderAsync(DemoWF.NorthwindService.Order or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteOrder", ReplyAction="http://tempuri.org/Service1/DeleteOrderResponse")]
        int DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteOrder", ReplyAction="http://tempuri.org/Service1/DeleteOrderResponse")]
        System.Threading.Tasks.Task<int> DeleteOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetProduct", ReplyAction="http://tempuri.org/Service1/GetProductResponse")]
        DemoWF.NorthwindService.Product GetProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetProduct", ReplyAction="http://tempuri.org/Service1/GetProductResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Product> GetProductAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllProduct", ReplyAction="http://tempuri.org/Service1/GetAllProductResponse")]
        DemoWF.NorthwindService.Product[] GetAllProduct();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllProduct", ReplyAction="http://tempuri.org/Service1/GetAllProductResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Product[]> GetAllProductAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetProductByName", ReplyAction="http://tempuri.org/Service1/GetProductByNameResponse")]
        DemoWF.NorthwindService.Product[] GetProductByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetProductByName", ReplyAction="http://tempuri.org/Service1/GetProductByNameResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Product[]> GetProductByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddProduct", ReplyAction="http://tempuri.org/Service1/AddProductResponse")]
        int AddProduct(DemoWF.NorthwindService.Product or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddProduct", ReplyAction="http://tempuri.org/Service1/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(DemoWF.NorthwindService.Product or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateProduct", ReplyAction="http://tempuri.org/Service1/UpdateProductResponse")]
        int UpdateProduct(DemoWF.NorthwindService.Product or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/UpdateProduct", ReplyAction="http://tempuri.org/Service1/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(DemoWF.NorthwindService.Product or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteProduct", ReplyAction="http://tempuri.org/Service1/DeleteProductResponse")]
        int DeleteProduct(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/DeleteProduct", ReplyAction="http://tempuri.org/Service1/DeleteProductResponse")]
        System.Threading.Tasks.Task<int> DeleteProductAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCustomer", ReplyAction="http://tempuri.org/Service1/GetCustomerResponse")]
        string GetCustomer(string id, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetCustomer", ReplyAction="http://tempuri.org/Service1/GetCustomerResponse")]
        System.Threading.Tasks.Task<string> GetCustomerAsync(string id, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllCustomer", ReplyAction="http://tempuri.org/Service1/GetAllCustomerResponse")]
        DemoWF.NorthwindService.Customer[] GetAllCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/GetAllCustomer", ReplyAction="http://tempuri.org/Service1/GetAllCustomerResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.Customer[]> GetAllCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddCustomer", ReplyAction="http://tempuri.org/Service1/AddCustomerResponse")]
        int AddCustomer(DemoWF.NorthwindService.Customer or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/AddCustomer", ReplyAction="http://tempuri.org/Service1/AddCustomerResponse")]
        System.Threading.Tasks.Task<int> AddCustomerAsync(DemoWF.NorthwindService.Customer or);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/getCusID", ReplyAction="http://tempuri.org/Service1/getCusIDResponse")]
        DemoWF.NorthwindService.DetailProducts[] getCusID(int CusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/getCusID", ReplyAction="http://tempuri.org/Service1/getCusIDResponse")]
        System.Threading.Tasks.Task<DemoWF.NorthwindService.DetailProducts[]> getCusIDAsync(int CusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestGetUser", ReplyAction="http://tempuri.org/Service1/TestGetUserResponse")]
        string TestGetUser(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestGetUser", ReplyAction="http://tempuri.org/Service1/TestGetUserResponse")]
        System.Threading.Tasks.Task<string> TestGetUserAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestAddUser", ReplyAction="http://tempuri.org/Service1/TestAddUserResponse")]
        string TestAddUser(DemoWF.NorthwindService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestAddUser", ReplyAction="http://tempuri.org/Service1/TestAddUserResponse")]
        System.Threading.Tasks.Task<string> TestAddUserAsync(DemoWF.NorthwindService.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Service1Channel : DemoWF.NorthwindService.Service1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DemoWF.NorthwindService.Service1>, DemoWF.NorthwindService.Service1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DemoWF.NorthwindService.Category GetCategogy(int id) {
            return base.Channel.GetCategogy(id);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Category> GetCategogyAsync(int id) {
            return base.Channel.GetCategogyAsync(id);
        }
        
        public DemoWF.NorthwindService.Category[] GetCategogyByName(string name) {
            return base.Channel.GetCategogyByName(name);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Category[]> GetCategogyByNameAsync(string name) {
            return base.Channel.GetCategogyByNameAsync(name);
        }
        
        public DemoWF.NorthwindService.Category[] GetAllCategory() {
            return base.Channel.GetAllCategory();
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Category[]> GetAllCategoryAsync() {
            return base.Channel.GetAllCategoryAsync();
        }
        
        public int AddCategory(DemoWF.NorthwindService.Category cate) {
            return base.Channel.AddCategory(cate);
        }
        
        public System.Threading.Tasks.Task<int> AddCategoryAsync(DemoWF.NorthwindService.Category cate) {
            return base.Channel.AddCategoryAsync(cate);
        }
        
        public int UpdateCategory(DemoWF.NorthwindService.Category cate) {
            return base.Channel.UpdateCategory(cate);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(DemoWF.NorthwindService.Category cate) {
            return base.Channel.UpdateCategoryAsync(cate);
        }
        
        public int DeleteCategory(int ID) {
            return base.Channel.DeleteCategory(ID);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCategoryAsync(int ID) {
            return base.Channel.DeleteCategoryAsync(ID);
        }
        
        public DemoWF.NorthwindService.Order[] GetOrder(string id) {
            return base.Channel.GetOrder(id);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetOrderAsync(string id) {
            return base.Channel.GetOrderAsync(id);
        }
        
        public DemoWF.NorthwindService.Order[] LoadOrder(string id, int numofrow, int numofnext) {
            return base.Channel.LoadOrder(id, numofrow, numofnext);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> LoadOrderAsync(string id, int numofrow, int numofnext) {
            return base.Channel.LoadOrderAsync(id, numofrow, numofnext);
        }
        
        public DemoWF.NorthwindService.Order[] GetListOrderByDate(string cusid, System.DateTime fromdate, System.DateTime todate) {
            return base.Channel.GetListOrderByDate(cusid, fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetListOrderByDateAsync(string cusid, System.DateTime fromdate, System.DateTime todate) {
            return base.Channel.GetListOrderByDateAsync(cusid, fromdate, todate);
        }
        
        public DemoWF.NorthwindService.Order[] GetAllOrder() {
            return base.Channel.GetAllOrder();
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Order[]> GetAllOrderAsync() {
            return base.Channel.GetAllOrderAsync();
        }
        
        public int AddOrder(DemoWF.NorthwindService.Order or) {
            return base.Channel.AddOrder(or);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(DemoWF.NorthwindService.Order or) {
            return base.Channel.AddOrderAsync(or);
        }
        
        public int UpdateOrder(DemoWF.NorthwindService.Order or) {
            return base.Channel.UpdateOrder(or);
        }
        
        public System.Threading.Tasks.Task<int> UpdateOrderAsync(DemoWF.NorthwindService.Order or) {
            return base.Channel.UpdateOrderAsync(or);
        }
        
        public int DeleteOrder(int id) {
            return base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public DemoWF.NorthwindService.Product GetProduct(int id) {
            return base.Channel.GetProduct(id);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Product> GetProductAsync(int id) {
            return base.Channel.GetProductAsync(id);
        }
        
        public DemoWF.NorthwindService.Product[] GetAllProduct() {
            return base.Channel.GetAllProduct();
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Product[]> GetAllProductAsync() {
            return base.Channel.GetAllProductAsync();
        }
        
        public DemoWF.NorthwindService.Product[] GetProductByName(string name) {
            return base.Channel.GetProductByName(name);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Product[]> GetProductByNameAsync(string name) {
            return base.Channel.GetProductByNameAsync(name);
        }
        
        public int AddProduct(DemoWF.NorthwindService.Product or) {
            return base.Channel.AddProduct(or);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(DemoWF.NorthwindService.Product or) {
            return base.Channel.AddProductAsync(or);
        }
        
        public int UpdateProduct(DemoWF.NorthwindService.Product or) {
            return base.Channel.UpdateProduct(or);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(DemoWF.NorthwindService.Product or) {
            return base.Channel.UpdateProductAsync(or);
        }
        
        public int DeleteProduct(int id) {
            return base.Channel.DeleteProduct(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductAsync(int id) {
            return base.Channel.DeleteProductAsync(id);
        }
        
        public string GetCustomer(string id, string pass) {
            return base.Channel.GetCustomer(id, pass);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerAsync(string id, string pass) {
            return base.Channel.GetCustomerAsync(id, pass);
        }
        
        public DemoWF.NorthwindService.Customer[] GetAllCustomer() {
            return base.Channel.GetAllCustomer();
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.Customer[]> GetAllCustomerAsync() {
            return base.Channel.GetAllCustomerAsync();
        }
        
        public int AddCustomer(DemoWF.NorthwindService.Customer or) {
            return base.Channel.AddCustomer(or);
        }
        
        public System.Threading.Tasks.Task<int> AddCustomerAsync(DemoWF.NorthwindService.Customer or) {
            return base.Channel.AddCustomerAsync(or);
        }
        
        public DemoWF.NorthwindService.DetailProducts[] getCusID(int CusID) {
            return base.Channel.getCusID(CusID);
        }
        
        public System.Threading.Tasks.Task<DemoWF.NorthwindService.DetailProducts[]> getCusIDAsync(int CusID) {
            return base.Channel.getCusIDAsync(CusID);
        }
        
        public string TestGetUser(string user, string password) {
            return base.Channel.TestGetUser(user, password);
        }
        
        public System.Threading.Tasks.Task<string> TestGetUserAsync(string user, string password) {
            return base.Channel.TestGetUserAsync(user, password);
        }
        
        public string TestAddUser(DemoWF.NorthwindService.User user) {
            return base.Channel.TestAddUser(user);
        }
        
        public System.Threading.Tasks.Task<string> TestAddUserAsync(DemoWF.NorthwindService.User user) {
            return base.Channel.TestAddUserAsync(user);
        }
    }
}
