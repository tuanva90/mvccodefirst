//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoWF.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/OfficalWCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Service1")]
    public interface Service1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/Test", ReplyAction="http://tempuri.org/Service1/TestResponse")]
        DemoWF.ServiceReference1.Category[] Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/Test", ReplyAction="http://tempuri.org/Service1/TestResponse")]
        System.Threading.Tasks.Task<DemoWF.ServiceReference1.Category[]> TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestAdd", ReplyAction="http://tempuri.org/Service1/TestAddResponse")]
        string TestAdd(DemoWF.ServiceReference1.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestAdd", ReplyAction="http://tempuri.org/Service1/TestAddResponse")]
        System.Threading.Tasks.Task<string> TestAddAsync(DemoWF.ServiceReference1.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestUpdate", ReplyAction="http://tempuri.org/Service1/TestUpdateResponse")]
        string TestUpdate(DemoWF.ServiceReference1.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestUpdate", ReplyAction="http://tempuri.org/Service1/TestUpdateResponse")]
        System.Threading.Tasks.Task<string> TestUpdateAsync(DemoWF.ServiceReference1.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestDelete", ReplyAction="http://tempuri.org/Service1/TestDeleteResponse")]
        string TestDelete(DemoWF.ServiceReference1.Category cate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Service1/TestDelete", ReplyAction="http://tempuri.org/Service1/TestDeleteResponse")]
        System.Threading.Tasks.Task<string> TestDeleteAsync(DemoWF.ServiceReference1.Category cate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Service1Channel : DemoWF.ServiceReference1.Service1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DemoWF.ServiceReference1.Service1>, DemoWF.ServiceReference1.Service1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DemoWF.ServiceReference1.Category[] Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<DemoWF.ServiceReference1.Category[]> TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public string TestAdd(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestAdd(cate);
        }
        
        public System.Threading.Tasks.Task<string> TestAddAsync(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestAddAsync(cate);
        }
        
        public string TestUpdate(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestUpdate(cate);
        }
        
        public System.Threading.Tasks.Task<string> TestUpdateAsync(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestUpdateAsync(cate);
        }
        
        public string TestDelete(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestDelete(cate);
        }
        
        public System.Threading.Tasks.Task<string> TestDeleteAsync(DemoWF.ServiceReference1.Category cate) {
            return base.Channel.TestDeleteAsync(cate);
        }
    }
}
